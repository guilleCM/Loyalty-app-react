{"version":3,"sources":["components/layout/NavBar.js","components/inputs/StringInput.jsx","components/inputs/InputHOC.jsx","pages/welcome/WelcomePage.jsx","pages/form/FormPage.jsx","pages/signup/SignupPage.jsx","lib/WithLayoutContainer.jsx","components/app/App.js","serviceWorker.js","stores/store.js","index.js"],"names":["NavApp","_ref","title","navigator","backButton","react_default","a","createElement","react_onsenui","modifier","className","onClick","popPage","StringInput","_this","this","props","placeholder","label","required","type","name","pattern","Object","assign","float","onChange","event","onInputChange","target","value","isInvalid","feedback","Component","InputHOC","inputs_StringInput","WelcomePage","inject","observer","userTypes","renderToolbar","NavBar","layout","store","userType","style","paddingTop","margin","sub_title_1","userName","paddingBottom","size","default","icon","sub_title_0","dataSource","advantages","renderHeader","renderRow","adv","index","canBeChecked","key","tappable","inputId","e","onChangeCheckbox","checked","htmlFor","caption","backgroundImage","footer","charAt","toUpperCase","slice","FormPage","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","formRef","React","createRef","bind","assertThisInitialized","onClickSubmit","_this2","ref","fields","field","inputs_InputHOC","renderFooter","form_help","padding","ripple","fetching","verticalAlign","indeterminate","next_step","setState","defineProperty","_this3","preventDefault","isValidForm","newState","dataToSend","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","input","current","querySelector","checkValidity","validationMessage","err","return","fetchOptions","method","body","JSON","stringify","fetch","then","response","json","data","mockName","loginUser","pushPage","component","withLayout","catch","error","SignupPage","onClickNextBtn","select","sub_title","isChecked","setUserType","routes","FormPage0","FormPage1","FormPage2","WelcomePage0","withLayoutContainer","WrappedComponent","routeName","_class","isPrivateRoute","arguments","length","LayoutContainerHOC","_dec","_Component","inherits","createClass","redirectToSignup","isLoggedIn","url","Fragment","zIndex","width","height","wrappedComponentName","displayName","concat","renderPage","route","App","initialRoute","animation","Boolean","window","location","hostname","match","observable","action","ons","ready","disableAutoStyling","ReactDOM","render","index_module","components_app_App","document","getElementById","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.78a1844c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { Toolbar, BackButton } from 'react-onsenui';\r\n\r\nconst NavApp = ({ title, navigator, backButton }) => (\r\n    <Toolbar modifier='custom'>\r\n        <div className='left'>\r\n            {backButton ? \r\n                <BackButton modifier=\"material custom-back-btn\" onClick={() => navigator.popPage()}>\r\n                    Back\r\n                </BackButton> \r\n            : \r\n            null}\r\n        </div>\r\n        <div className='center'>\r\n            <strong className=\"navbar-title\">\r\n                {title}\r\n            </strong>\r\n        </div>\r\n    </Toolbar>\r\n);\r\n\r\nexport default NavApp;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Input } from 'react-onsenui';\r\n\r\nconst propTypes = {\r\n    label: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    required: PropTypes.bool,\r\n};\r\n\r\nclass StringInput extends Component {\r\n    render() {\r\n        let placeholder = this.props.label + (this.props.required ? \" *\" : \"\");\r\n        let props = {\r\n            placeholder: placeholder,\r\n            type: this.props.type,\r\n            name: this.props.name,\r\n            pattern: this.props.pattern,\r\n        }\r\n        if (this.props.required) props['required'] = true;\r\n        return (\r\n            <div className=\"input-wrapper\">\r\n                <Input\r\n                    float\r\n                    onChange={(event) => this.props.onInputChange(this.props.name, event.target.value)}\r\n                    modifier='material custom-input'\r\n                    {...props}\r\n                />\r\n                {this.props.isInvalid &&\r\n                    <span className=\"input-feedback-invalid\">\r\n                        {this.props.feedback}\r\n                    </span>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nStringInput.propTypes = propTypes;\r\n\r\nexport default StringInput;","import React from 'react';\r\n\r\nimport StringInput from './StringInput';\r\nimport './Input.css';\r\n\r\nfunction InputHOC(props) {\r\n    switch (props.type) {\r\n        case 'tel':\r\n            return <StringInput {...props} pattern=\"\\d*\"/>;\r\n        default:\r\n            return <StringInput {...props} />;;\r\n    }\r\n}\r\n\r\nexport default InputHOC;","import React, { Component } from 'react';\r\nimport { observer, inject } from 'mobx-react';\r\nimport PropTypes from 'prop-types';\r\nimport { Page, List, ListItem, ListHeader, Checkbox, Icon } from 'react-onsenui';\r\n\r\n\r\nimport NavBar from './../../components/layout/NavBar';\r\nimport './WelcomePage.css';\r\n\r\nconst propTypes = {\r\n    layout: PropTypes.object.isRequired,\r\n    store: PropTypes.object.isRequired,\r\n};\r\n\r\n@inject('store')\r\n@observer \r\nclass WelcomePage extends Component {\r\n    render() {\r\n        const userTypes = {\r\n            HOTEL_GUEST: 0,\r\n            TRAVEL_AGENCY: 1,\r\n            COMPANY: 2,\r\n        } \r\n        return(\r\n            <Page renderToolbar={() => <NavBar title={this.props.layout['title_'+this.props.store.userType]} navigator={navigator} />}>\r\n                <ListHeader modifier=\"custom-list-header\" style={{paddingTop: '1rem', margin: 'auto'}}>\r\n                    {this.props.store.userType !== userTypes.HOTEL_GUEST &&\r\n                        <h3>{this.props.layout.sub_title_1 + \" \" + this.props.store.userName + \"!\"}</h3>\r\n                    }\r\n                    <Icon\r\n                        style={{paddingTop: 30, paddingBottom: 30}}\r\n                        size={{default: 100}}\r\n                        icon={{default: 'fa-check-circle'}}\r\n                    />\r\n                    {this.props.store.userType === userTypes.HOTEL_GUEST &&\r\n                        <h3>{this.props.layout.sub_title_0 + \" \" + this.props.store.userName + \"!\"}</h3>\r\n                    }\r\n                </ListHeader>\r\n                {this.props.store.userType === userTypes.HOTEL_GUEST &&\r\n                    <List\r\n                        dataSource={this.props.layout.advantages}\r\n                        renderHeader={() => <ListHeader modifier=\"adv-list-header\" >Advantages:</ListHeader>}\r\n                        renderRow={(adv, index) => {\r\n                            let canBeChecked = index === 2; //mocked just for now\r\n                            return (\r\n                                <ListItem key={index} modifier={\"custom-list-item\" + (canBeChecked ? \" item-can-be-checked\" : \" item-selected\")} tappable>\r\n                                    <label className=\"left\">\r\n                                        <Checkbox \r\n                                            inputId={'checkbox' + index} \r\n                                            onChange={(e) => this.onChangeCheckbox(e)}\r\n                                            checked={true}\r\n                                            modifier={canBeChecked ? \"can-be-checked\" : \"\"}\r\n                                        />\r\n                                    </label>\r\n                                    <label htmlFor={'checkbox' + index} className={\"center\"}>\r\n                                        {adv.caption}\r\n                                    </label>\r\n                                </ListItem>\r\n                            );\r\n                        }}\r\n                    />\r\n                }\r\n                {this.props.store.userType !== userTypes.HOTEL_GUEST &&\r\n                    <ListHeader modifier=\"custom-list-footer\" style={{backgroundImage: 'none'}}>\r\n                        {this.props.layout.footer.charAt(0).toUpperCase() + this.props.layout.footer.slice(1)}\r\n                    </ListHeader>\r\n                }\r\n            </Page>\r\n        )\r\n    }\r\n    onChangeCheckbox(event) {\r\n        event.target.checked = !event.target.checked\r\n    }\r\n}\r\n\r\nWelcomePage.propTypes = propTypes;\r\n\r\nexport default WelcomePage;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { observer, inject } from 'mobx-react';\r\nimport { Page, List, ListItem, Button, Row, ListHeader, ProgressCircular } from 'react-onsenui';\r\n\r\nimport NavBar from '../../components/layout/NavBar';\r\nimport InputHOC from './../../components/inputs/InputHOC';\r\nimport withLayout from '../../lib/WithLayoutContainer';\r\nimport WelcomePage from './../welcome/WelcomePage';\r\nimport './FormPage.css';\r\n\r\nconst propTypes = {\r\n    layout: PropTypes.object.isRequired,\r\n    navigator: PropTypes.object.isRequired,\r\n    store: PropTypes.object.isRequired,\r\n};\r\n\r\n@inject('store')\r\n@observer \r\nclass FormPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {}\r\n        this.formRef = React.createRef();\r\n        this.onInputChange = this.onInputChange.bind(this);\r\n        this.onClickSubmit = this.onClickSubmit.bind(this);\r\n    }\r\n    render() {\r\n        return(\r\n            <Page renderToolbar={() => <NavBar backButton title={this.props.layout.title} navigator={this.props.navigator} />}>\r\n                <form ref={this.formRef}>\r\n                    <List\r\n                        style={{paddingTop: '12px'}}\r\n                        dataSource={this.props.layout.fields}\r\n                        renderRow={(field, index) => {\r\n                            return (\r\n                                <ListItem key={index} tappable modifier=\"nodivider\">\r\n                                    <InputHOC\r\n                                        type={field.type}\r\n                                        required={field.required}\r\n                                        name={field.name}\r\n                                        label={field.label}\r\n                                        onInputChange={this.onInputChange}\r\n                                        isInvalid={this.state[field.name+\"-isInvalid\"]}\r\n                                        feedback={this.state[field.name+\"-feedback\"]}\r\n                                    />\r\n                                </ListItem>\r\n                            );\r\n                        }}\r\n                        renderFooter={() => <ListHeader modifier=\"custom-form-footer\">{this.props.layout.form_help}</ListHeader>}\r\n                    />\r\n                    <Row style={{padding: '1rem'}}>\r\n                        <Button modifier=\"large--cta custom-btn\" ripple onClick={(e) => this.onClickSubmit(e)}>\r\n                            {!this.state.fetching ?\r\n                                this.props.layout.next_step\r\n                                :\r\n                                <ProgressCircular style={{verticalAlign: 'middle'}} indeterminate modifier=\"send-btn-progress\" />\r\n                            }\r\n                        </Button>\r\n                    </Row>\r\n                </form>\r\n            </Page>\r\n        )\r\n    }\r\n    onInputChange(name, value) {\r\n        this.setState({\r\n            [name]: value,\r\n        });\r\n    }\r\n    onClickSubmit(event) {\r\n        if (this.state.fetching) {\r\n            event.preventDefault();\r\n            return false;\r\n        }\r\n        let isValidForm = true;\r\n        let newState = {};\r\n        let dataToSend = {};\r\n        for (let field of this.props.layout.fields) {\r\n            let input = this.formRef.current.querySelector('input[name=\"'+field.name+'\"]');\r\n            if (input.checkValidity()) {\r\n                newState[field.name] = this.state[field.name];\r\n                newState[field.name+\"-isInvalid\"] = false;\r\n                newState[field.name+\"-feedback\"] = '';\r\n                dataToSend[field.name] = this.state[field.name];\r\n            }\r\n            else {\r\n                isValidForm = false;\r\n                newState[field.name] = this.state[field.name];\r\n                newState[field.name+\"-isInvalid\"] = true;\r\n                newState[field.name+\"-feedback\"] = input.validationMessage;\r\n            }\r\n        }\r\n        if (isValidForm) {\r\n            newState['fetching'] = true;\r\n            this.setState(newState);\r\n            let fetchOptions = {\r\n                method: 'post',\r\n                body: JSON.stringify(dataToSend),\r\n            }\r\n            const url = 'https://demo0339219.mockable.io/users';\r\n            fetch(url, fetchOptions)\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    //here we should get the response data but for now we just get it from the state \r\n                    let fieldName = [\"name\", \"agency_name\", \"company_name\"];\r\n                    let mockName = newState[fieldName[this.props.store.userType]];\r\n                    this.props.store.loginUser(mockName);\r\n                    this.props.navigator.pushPage({\r\n                        component: withLayout(WelcomePage, \"WelcomePage0\"), key: 'WELCOME_PAGE_0'\r\n                    });\r\n                })\r\n                .catch(error => this.setState({ error: true }))\r\n        }\r\n        else {\r\n            this.setState(newState);\r\n        }\r\n    }\r\n}\r\n\r\nFormPage.propTypes = propTypes;\r\n\r\nexport default FormPage;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { observer, inject } from 'mobx-react';\r\nimport { Page, List, ListItem, ListHeader, Checkbox, Button, Row } from 'react-onsenui';\r\n\r\nimport NavBar from './../../components/layout/NavBar';\r\nimport FormPage from './../form/FormPage';\r\nimport withLayout from './../../lib/WithLayoutContainer';\r\nimport './SignupPage.css';\r\n\r\nconst propTypes = {\r\n    layout: PropTypes.object.isRequired,\r\n    navigator: PropTypes.object.isRequired,\r\n    store: PropTypes.object.isRequired,\r\n};\r\n\r\n@inject('store')\r\n@observer \r\nclass SignupPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userType: 0 \r\n        }\r\n        this.onChangeCheckbox = this.onChangeCheckbox.bind(this);\r\n        this.onClickNextBtn = this.onClickNextBtn.bind(this);\r\n    }\r\n    render() {\r\n        return(\r\n            <Page renderToolbar={() => <NavBar title={this.props.layout.title} navigator={navigator} />}>\r\n                <List\r\n                    dataSource={this.props.layout.select}\r\n                    renderHeader={() => <ListHeader modifier=\"custom-list-header\">{this.props.layout.sub_title}</ListHeader>}\r\n                    renderRow={(select, index) => {\r\n                        let isChecked = this.state.userType === select.value;\r\n                        return (\r\n                            <ListItem key={index} modifier={\"custom-list-item\" + (isChecked ? \" item-selected\" : \"\")} tappable>\r\n                                <label className=\"left\">\r\n                                    <Checkbox \r\n                                        inputId={'checkbox' + index} \r\n                                        onChange={() => this.onChangeCheckbox(select.value)}\r\n                                        checked={isChecked}\r\n                                    />\r\n                                </label>\r\n                                <label htmlFor={'checkbox' + index} className={\"center\"}>\r\n                                    {select.caption}\r\n                                </label>\r\n                            </ListItem>\r\n                        );\r\n                    }}\r\n                    renderFooter={() => \r\n                        <ListHeader modifier=\"custom-list-footer\">\r\n                            {this.props.layout.advantages.charAt(0).toUpperCase() + this.props.layout.advantages.slice(1)}\r\n                        </ListHeader>\r\n                    }\r\n                />\r\n                <Row style={{padding: '1rem'}}>\r\n                    <Button modifier=\"large--cta custom-btn\" ripple onClick={this.onClickNextBtn}>\r\n                        {this.props.layout.next_step}\r\n                    </Button>\r\n                </Row>\r\n            </Page>\r\n        )\r\n    }\r\n\r\n    onChangeCheckbox(index) {\r\n        this.setState({\r\n            userType: index,\r\n        })\r\n    }\r\n\r\n    onClickNextBtn() {\r\n        this.props.store.setUserType(this.state.userType);\r\n        this.props.navigator.pushPage({\r\n            component: withLayout(FormPage, \"FormPage\"+this.state.userType), key: 'FORM_PAGE_'+this.state.userType\r\n        })\r\n    }\r\n\r\n}\r\n\r\nSignupPage.propTypes = propTypes;\r\n\r\nexport default SignupPage;","import React, { Component } from 'react';\r\nimport { observer, inject } from 'mobx-react';\r\nimport { ProgressCircular, Page } from 'react-onsenui';\r\nimport SignupPage from './../pages/signup/SignupPage';\r\n\r\n// import SignupPage from './SignupPage';\r\nconst routes = {\r\n    \"SignupPage\": \"https://demo0339219.mockable.io/screens/signup\",\r\n    \"FormPage0\": \"https://demo0339219.mockable.io/screens/signup/0\",\r\n    \"FormPage1\": \"https://demo0339219.mockable.io/screens/signup/1\",\r\n    \"FormPage2\": \"https://demo0339219.mockable.io/screens/signup/2\",\r\n    \"WelcomePage0\": \"https://demo0339219.mockable.io/screens/welcome/0\",\r\n}\r\n\r\nconst withLayoutContainer = (WrappedComponent, routeName, isPrivateRoute=false) => {\r\n    @inject('store')\r\n    @observer\r\n    class LayoutContainerHOC extends Component {\r\n        constructor(props) {\r\n            super(props);\r\n            this.state = {\r\n                data: null,\r\n                error: null,\r\n            };\r\n        }\r\n        componentDidMount() {\r\n            const redirectToSignup = isPrivateRoute && !this.props.store.isLoggedIn;\r\n            let url = routes[routeName]\r\n            if (redirectToSignup) {\r\n                WrappedComponent = SignupPage;\r\n                url = routes[\"SignupPage\"];\r\n            }\r\n            fetch(url)\r\n                .then(response => response.json())\r\n                .then(data => this.setState({ data: data }))\r\n                .catch(error => this.setState({ error: true }))\r\n        }\r\n        render() {\r\n            return (\r\n                <>\r\n                    {this.state.data && !this.state.error &&\r\n                        <WrappedComponent layout={this.state.data} {...this.props} />\r\n                    }\r\n                    {this.state.error &&\r\n                        // TODO: Show error message\r\n                        <Page>\r\n                            <p>500: Server error, try later</p>\r\n                        </Page>\r\n                    }\r\n                    {this.state.data === null && this.state.error === null &&\r\n                        <Page>\r\n                            <div className=\"full-screen-loader\" style={{zIndex: 10}}>\r\n                                <ProgressCircular indeterminate style={{width: 50, height: 50}}/>\r\n                            </div>\r\n                        </Page>\r\n                    }\r\n                </>\r\n            );\r\n        }\r\n    }\r\n    const wrappedComponentName = WrappedComponent.displayName\r\n    || WrappedComponent.name\r\n    || 'Component';\r\n    LayoutContainerHOC.displayName = `withLayoutContainer(${wrappedComponentName})`;\r\n    return LayoutContainerHOC;\r\n}\r\n\r\nexport default withLayoutContainer;","import React, { Component } from 'react';\nimport { Navigator } from 'react-onsenui';\n\nimport 'onsenui/css/onsenui.css';\nimport 'onsenui/css/onsen-css-components.css';\nimport './App.css';\n\nimport withLayoutContainer from './../../lib/WithLayoutContainer';\nimport WelcomePage from './../../pages/welcome/WelcomePage';\n// const InitialRoute = withLayoutContainer(SignupPage);\n\nconst renderPage = (route, navigator) => (\n    <route.component key={route.key} navigator={navigator} />\n);\n\nclass App extends Component {\n    render() {\n        return (\n            <Navigator\n                renderPage={renderPage}\n                initialRoute={{component: withLayoutContainer(WelcomePage, \"WelcomePage0\", true), key: 'WELCOME_PAGE'}}\n                animation='fade'\n            />\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { action, observable } from 'mobx'\r\n\r\n\r\nclass Store {\r\n    @observable isLoggedIn = false\r\n    @observable userName = null\r\n    @observable userType = null \r\n\r\n    @action\r\n    loginUser = (userName) => {\r\n        this.isLoggedIn = true;\r\n        this.userName = userName;\r\n    }\r\n    @action\r\n    setUserType = (userType) => {\r\n        this.userType = userType;\r\n    }\r\n}\r\n\r\n\r\nexport const store = new Store()\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\nimport ons from 'onsenui';\nimport { Provider } from 'mobx-react';\nimport { store } from './stores/store';\n\n\nons.ready(() => {\n    ons.disableAutoStyling()\n    ReactDOM.render(\n        <Provider store={store}>\n            <App />\n        </Provider>,\n    document.getElementById('root'));\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}